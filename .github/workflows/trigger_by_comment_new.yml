name: CI - QA Tests on Localenv

on:
  pull_request:
    types: [labeled]
  issue_comment:
    types: [created]

jobs:
  show_help:
    name: Show Available QA Commands
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/help')
    steps:
      - name: Post help comment
        uses: actions/github-script@v7
        with:
          script: |
            const helpMessage = `
            ## 🧪 Available QA Test Commands

            ### Basic Commands:
            - \`/run-qa-smoke\` - Run smoke tests with current PR image
            - \`/run-qa-integration\` - Run integration tests with current PR image  
            - \`/run-qa-all\` - Run all tests with current PR image

            ### Custom Docker Images:
            Use format: \`service:pr_number\` to specify images from other PRs

            **Examples:**
            \`\`\`
            /run-qa-smoke spa-improvado:456
            /run-qa-integration dts:123 spa-improvado:456
            /run-qa-all spa-improvado:789 another-service:321
            \`\`\`

            ### How it works:
            - \`spa-improvado:456\` automatically becomes \`spa-improvado:pr-456\`
            - You can specify multiple services with their PR numbers
            - If no custom images specified, uses current PR image

            ### Need help?
            Comment \`/help\` to see this message again.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: helpMessage
            });

  handle_invalid_commands:
    name: Handle Invalid QA Commands
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      github.event.issue.pull_request &&
      (
        contains(github.event.comment.body, '/run-qa') &&
        !contains(github.event.comment.body, '/run-qa-smoke') &&
        !contains(github.event.comment.body, '/run-qa-integration') &&
        !contains(github.event.comment.body, '/run-qa-all')
      )
    steps:
      - name: Post invalid command help
        uses: actions/github-script@v7
        with:
          script: |
            const invalidMessage = `
            ❌ **Invalid QA command detected!**
            
            Did you mean one of these?
            - \`/run-qa-smoke\` - Run smoke tests
            - \`/run-qa-integration\` - Run integration tests  
            - \`/run-qa-all\` - Run all tests
            
            💡 **Tip:** Comment \`/help\` to see all available commands and examples.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: invalidMessage
            });

  parse_comment:
    name: Parse Comment for QA Test Command
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' && 
      github.event.issue.pull_request &&
      (
        contains(github.event.comment.body, '/run-qa-smoke') ||
        contains(github.event.comment.body, '/run-qa-integration') ||
        contains(github.event.comment.body, '/run-qa-all')
      )
    outputs:
      command_type: ${{ steps.parse.outputs.command_type }}
      custom_images: ${{ steps.parse.outputs.custom_images }}
      should_run: ${{ steps.parse.outputs.should_run }}
    steps:
      - name: Get PR branch
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - name: Set commit status as pending
        uses: myrotvorets/set-commit-status-action@master
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: pending
          context: QA Tests

      # TODO: Uncomment this step to add user permission checks
      # - name: Check user permissions
      #   run: |
      #     USER="${{ github.event.comment.user.login }}"
      #     echo "Comment author: $USER"
      #
      #     # Example permission checks (uncomment as needed):
      #     # Check if user is PR author:
      #     # if [ "$USER" != "${{ github.event.issue.user.login }}" ]; then
      #     #   echo "Only PR author can run QA tests"
      #     #   exit 1
      #     # fi
      #     #
      #     # Check if user is in allowed list:
      #     # ALLOWED_USERS="user1,user2,admin"
      #     # if [[ ",$ALLOWED_USERS," != *",$USER,"* ]]; then
      #     #   echo "User $USER is not authorized to run QA tests"
      #     #   exit 1
      #     # fi

      - name: Parse comment command
        id: parse
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          echo "Comment body: $COMMENT_BODY"
          
          # Extract command type
          if echo "$COMMENT_BODY" | grep -q "/run-qa-smoke"; then
            echo "command_type=smoke" >> $GITHUB_OUTPUT
          elif echo "$COMMENT_BODY" | grep -q "/run-qa-integration"; then
            echo "command_type=integration" >> $GITHUB_OUTPUT
          elif echo "$COMMENT_BODY" | grep -q "/run-qa-all"; then
            echo "command_type=all" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract custom images (format: service:pr_number service2:pr_number2)
          # This will match patterns like "spa-improvado:123" or "dts:456"
          CUSTOM_SERVICES=$(echo "$COMMENT_BODY" | grep -oE '[a-zA-Z0-9_-]+:[0-9]+' | tr '\n' ' ')
          echo "custom_images=$CUSTOM_SERVICES" >> $GITHUB_OUTPUT
          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "Found custom services: $CUSTOM_SERVICES"

  get_latest_docker_image:
    name: Mock Docker Image Selection
    runs-on: ubuntu-latest
    needs: [parse_comment]
    if: |
      always() && (
        (github.event_name == 'pull_request' && (
          contains(github.event.pull_request.labels.*.name, 'run-qa-smoke-tests-on-localenv') ||
          contains(github.event.pull_request.labels.*.name, 'run-qa-integration-tests-on-localenv')
        )) ||
        (github.event_name == 'issue_comment' && needs.parse_comment.outputs.should_run == 'true')
      )
    outputs:
      docker_image: ${{ steps.get_image.outputs.docker_image }}
      docker_tag: ${{ steps.get_image.outputs.docker_tag }}
      all_custom_images: ${{ steps.get_image.outputs.all_custom_images }}
    steps:
      - name: Mock Docker image selection
        id: get_image
        run: |
          # Get PR number from different event types
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            PR_NUMBER="${{ github.event.pull_request.number }}"
          else
            # For issue_comment, get PR number from issue
            PR_NUMBER="${{ github.event.issue.number }}"
          fi
          
          echo "PR Number: $PR_NUMBER"
          
          # Parse custom services from comment if available  
          CUSTOM_SERVICES="${{ needs.parse_comment.outputs.custom_images || '' }}"
          echo "Custom services from comment: $CUSTOM_SERVICES"
          
          if [ -n "$CUSTOM_SERVICES" ]; then
            # Build Docker image tags with pr- prefix
            echo "Building Docker tags for services: $CUSTOM_SERVICES"
            
            # Parse first service:pr_number pair for backward compatibility
            MAIN_SERVICE=$(echo "$CUSTOM_SERVICES" | awk '{print $1}' | cut -d':' -f1)
            MAIN_PR=$(echo "$CUSTOM_SERVICES" | awk '{print $1}' | cut -d':' -f2)
            MAIN_TAG="pr-${MAIN_PR}"
            
            # Build all custom image tags 
            ALL_IMAGES=""
            for service_pr in $CUSTOM_SERVICES; do
              service=$(echo "$service_pr" | cut -d':' -f1)
              pr_num=$(echo "$service_pr" | cut -d':' -f2)
              tag="pr-${pr_num}"
              if [ -n "$ALL_IMAGES" ]; then
                ALL_IMAGES="$ALL_IMAGES ${service}:${tag}"
              else
                ALL_IMAGES="${service}:${tag}"
              fi
            done
            
            echo "docker_image=$MAIN_SERVICE" >> $GITHUB_OUTPUT
            echo "docker_tag=$MAIN_TAG" >> $GITHUB_OUTPUT
            echo "all_custom_images=$ALL_IMAGES" >> $GITHUB_OUTPUT
            echo "Built image tags: $ALL_IMAGES"
          else
            # Mock default image for this PR
            echo "Using mock image for PR $PR_NUMBER"
            echo "docker_image=trivia-bot" >> $GITHUB_OUTPUT
            echo "docker_tag=pr-${PR_NUMBER}" >> $GITHUB_OUTPUT
            echo "all_custom_images=" >> $GITHUB_OUTPUT
          fi

  run_qa_tests:
    name: Run QA Tests (Mock)
    runs-on: ubuntu-latest
    needs: [get_latest_docker_image, parse_comment]
    if: always() && needs.get_latest_docker_image.result == 'success'
    steps:
      - name: Mock QA Tests Execution
        run: |
          echo "🧪 Running QA Tests..."
          echo "Test Type: ${{ needs.parse_comment.outputs.command_type }}"
          echo "Docker Image: ${{ needs.get_latest_docker_image.outputs.docker_image }}"
          echo "Docker Tag: ${{ needs.get_latest_docker_image.outputs.docker_tag }}"
          echo "Custom Images: ${{ needs.get_latest_docker_image.outputs.all_custom_images }}"
          
          # Simulate test execution
          echo "Starting smoke tests..."
          sleep 5
          echo "Starting integration tests..."
          sleep 5
          echo "All tests completed successfully! ✅"

  report_results:
    name: Report QA Test Results
    needs: [parse_comment, run_qa_tests]
    runs-on: ubuntu-latest
    if: always() && needs.parse_comment.result == 'success'
    steps:
      - name: Get PR branch
        uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch

      - name: Set commit status as ${{ needs.run_qa_tests.result }}
        uses: myrotvorets/set-commit-status-action@master
        if: always()
        with:
          sha: ${{ steps.comment-branch.outputs.head_sha }}
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ needs.run_qa_tests.result }}
          context: QA Tests

      - name: Add comment to PR
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const workflowName = '${{ github.workflow }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ needs.run_qa_tests.result }}' === 'success';
            const commandType = '${{ needs.parse_comment.outputs.command_type }}';
            const customImages = '${{ needs.parse_comment.outputs.custom_images }}';
            
            let body = `## 🧪 QA ${commandType.toUpperCase()} Tests: ${success ? 'PASSED ✅' : 'FAILED ❌'}\n\n`;
            
            if (customImages) {
              body += `**Custom images used:** \`${customImages}\`\n\n`;
            }
            
            body += `**Workflow run:** [${workflowName}](${url})`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
